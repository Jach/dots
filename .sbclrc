;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)
    (asdf:load-system "ql-https")
    (uiop:symbol-call :quicklisp :setup)))
#+ql-https
(setf ql-https:*quietly-use-https* t)

(defun update-ql ()
  (ql:update-client)
  (ql:update-all-dists))

(defun dump-core ()
  ; make sure to update-ql and restart sbcl first
  ; add any quickloads here that we might want as part of core not captured by .sbclrc
  ; numcl, vgplot
  (ql:quickload :dexador)
  (ql:quickload :plump)
  (ql:quickload :lquery)
  (ql:quickload :com.inuoe.jzon)
  (ql:quickload :cl-ppcre)
  (ql:quickload :cl-webdriver-client)
  (ql:quickload :ironclad)
  (ql:quickload :sdl2)
  (ql:quickload :cl-opengl)
  (ql:quickload :spinneret)
  (ql:quickload :hunchentoot)

  (uiop:dump-image "sbcl-core"))


(defparameter *undefined-functions* nil)
(defun enable-undefn-warnings ()
  ; useful idea I had, rebind defun to keep track
  ; of functions that have been referenced but not yet
  ; defined. Loosely inspired by Utopian.
  (setf (macro-function 'cl-defun) (macro-function 'defun))
  (handler-bind
    ((warning
       (lambda (w)
         (declare (ignorable w))
         (invoke-restart 'muffle-warning)))
     (sb-ext:symbol-package-locked-error
       (lambda (e)
         (declare (ignorable e))
         (invoke-restart 'continue))))
    (defmacro defun (name args &body body)
      `(handler-bind
         ((sb-int:simple-style-warning
            (lambda (w)
              (let ((c (simple-condition-format-control w))
                    (a (simple-condition-format-arguments w)))
                (when (and (equal c "undefined ~(~A~): ~S")
                           (eql (length a) 2)
                           (eql (first a) :function))
                  (setf *undefined-functions*
                        (union *undefined-functions* (cdr a))))))))
         (eval '(cl-defun ,name ,args ,@body))
         (setf *undefined-functions*
               (set-difference *undefined-functions* '(,name)))
         (if (plusp (length *undefined-functions*))
             (format t
                     "; REMINDER: you still have undefined functions ~S"
                     *undefined-functions*)))))
  (defun typo (fn)
    "Remove undef fn reminder manually, e.g. due to typos."
    (setf *undefined-functions*
          (set-difference *undefined-functions* (list fn))))
  )


(defun hash-to-list (hash)
  "Turns key-value hash table to list of ((k1 v1) (k2 v2) ...)"
  (loop
    :for k being the hash-key :using (hash-value v) of hash
    :nconc (list (list k v))))

(defun hash-to-plist (hash)
  "Turns key-value hash table to pair list of (k1 v1 k2 v2 ...)"
  (loop
    :for k being the hash-key :using (hash-value v) of hash
    :nconc (list k v)))

(locally
  (declare #+sbcl (sb-ext:muffle-conditions sb-kernel:redefinition-warning))
  (handler-bind
    (#+sbcl (sb-kernel:redefinition-warning #'muffle-warning))
(defmethod print-object ((hash hash-table) out)
  "Print hash table like a data object, e.g.
{:A 1
 :B 2}"
  (format t "{~{~s ~s~^~% ~}}" (hash-to-plist hash))
  #|(loop
    :initially (format out "{")
    :for k being the hash-key :using (hash-value v) of hash
    :do (format out "~% ~s ~s" k v)
    :finally (format out "~%}~%"))|#)
))

;(declaim (optimize (debug 3)))
;(declaim (optimize (speed 3) (space 3) (debug 0) (safety 0)))
; (declaim (optimize (speed 3)))
;(progn
;  (sb-ext:restrict-compiler-policy 'safety 3)
;  (sb-ext:restrict-compiler-policy 'debug 3))
; note that under safety of 3, we get certain runtime type checks inserted for us
; note that under speed of 3, we get compilation warnings about insufficient type info for e.g. slow generic adds.

(unless (find-package :cmu-infix)
  #+quicklisp (ql:quickload 'cmu-infix))
#+quicklisp (named-readtables:in-readtable cmu-infix:syntax)

;(format t "Your cwd is ~s.~%" (sb-posix:getcwd))

; (sb-ext:describe-compiler-policy)
; sb-c::*policy*
; (sb-cltl2:declaration-information 'optimize)

; (with-standard-io-syntax (print hash-table))
; #.(sb-impl::%stuff-hash-table (make-hash-table) (quote ((foo . 1))))

(set-dispatch-macro-character #\# #\! (lambda (stream subchar arg)
                                        (declare (ignore subchar arg))
                                        (read-line stream nil (values) t)
                                        (values)))


#|
;#+quicklisp (ql:quickload :clouseau)
(defvar *clouseau-inspector* nil)
(defun clouseau-inspect (symbol)
  (unless (and (clim:application-frame-p *clouseau-inspector*)
               (clim-internals::frame-process *clouseau-inspector*))
    (setf *clouseau-inspector*
          (nth-value 1 (clouseau:inspect nil :new-process t))))

  (setf (clouseau:root-object *clouseau-inspector* :run-hook-p t)
        symbol)
  (values))

#+quicklisp (ql:quickload :bordeaux-threads)
(defvar *watching* nil)

(defun clouseau-unwatch ()
  (bt:destroy-thread *watching*)
  (setf *watching* nil))

(defun clouseau-watch (symbol &optional (refresh 1))
  (unless (and (clim:application-frame-p *clouseau-inspector*)
               (clim-internals::frame-process *clouseau-inspector*))
    (setf *clouseau-inspector*
          (nth-value 1 (clouseau:inspect nil :new-process t))))

  (when *watching*
    (clouseau-unwatch))

  (setf *watching*
        (bt:make-thread (lambda ()
                          (loop
                            (setf (clouseau:root-object *clouseau-inspector* :run-hook-p t)
                                  symbol)
                            (sleep refresh))))))

|#


;(setf *print-case* :downcase) ; let's try it out...
; messes up some libraries..
(setf *print-right-margin* 1000) ; allow wrapping to not truncate things like describe

(defun search-in-docstring (text &key (test (function search)))
  (let ((funs '()))
    (do-symbols (fun)
      (when (fboundp fun)
        (let ((docstring (documentation fun 'function)))
          (when (and docstring
                     (funcall test text docstring))
            (push fun funs)))))
    funs))

(defun asdf-here ()
  (push (uiop:getcwd) asdf:*central-registry*))

(unless (find-package :closer-mop)
  #+quicklisp (ql:quickload 'closer-mop))
(defun show-applicable-methods (method class-symbol)
  (closer-mop:compute-applicable-methods-using-classes method (list (find-class class-symbol))))
(defun show-effective-method (method class-symbol)
  (closer-mop:compute-effective-method method
                                       (closer-mop:find-method-combination method 'standard nil)
                                       (show-applicable-methods method class-symbol)))

(defun log-gc ()
  (setf (sb-ext:gc-logfile) "/tmp/gc"))
(defun unlog-gc ()
  (setf (sb-ext:gc-logfile) nil))
; don't forget: sb-impl::without-gcing

#+nil
(defun profile ()
  (require :sb-sprof)
  (sb-sprof:reset)
  (sb-sprof:start-profiling
    :mode :alloc
    :threads (list sb-thread:*current-thread*))
  ; wait
  (sb-sprof:stop-profiling)
  (sb-sprof:report :max 40))


(defun num2bin (num)
  (format nil "#b~b" num))

(defun num2hex (num)
  (format nil "#x~x" num))

(defun hexdump (address length &optional (bytes-per-line 16))
  "Display a hexdump of memory starting at ADDRESS for LENGTH bytes.
   Similar to xxd or hexdump utilities.
   BYTES-PER-LINE controls how many bytes are shown per line (default 16)."
  (let ((start-addr address))
    (loop for offset from 0 below length by bytes-per-line
          do (let ((line-length (min bytes-per-line (- length offset))))
               ;; Print address
               (format t "~8,'0x: " (+ start-addr offset))

               ;; Print hex bytes in groups of 2
               (loop for i from 0 below bytes-per-line
                     do (if (< i line-length)
                            (let ((byte (sb-sys:sap-ref-8
                                        (sb-sys:int-sap (+ address offset i)) 0)))
                              (format t "~2,'0x" byte)
                              (when (oddp i) (format t " ")))
                            (progn
                              (format t "  ")
                              (when (oddp i) (format t " ")))))

               ;; Add extra space before ASCII section
               (format t " |")

               ;; Print ASCII interpretation
               (loop for i from 0 below line-length
                     do (let ((byte (sb-sys:sap-ref-8
                                    (sb-sys:int-sap (+ address offset i)) 0)))
                          (if (and (>= byte 32) (<= byte 126))
                              (format t "~c" (code-char byte))
                              (format t "."))))

               ;; Close ASCII section and newline
               (format t "|~%")))))

(defun hexdump-object (object &key (extra-bytes 0) (offset 0))
  "Hexdump the memory representation of a Lisp object.
   EXTRA-BYTES specifies how many additional bytes to show after the object.
   OFFSET is the byte offset from the object's address (can be negative)."
  (let* ((base-addr (sb-kernel:get-lisp-obj-address object))
         (addr (+ base-addr offset))
         ;; Estimate object size based on type
         (base-size (cond
                      ((consp object) 16)        ; cons cell
                      ((symbolp object) 24)      ; symbol
                      ((stringp object) (+ 24 (length object))) ; string + header
                      ((vectorp object) (+ 24 (* (length object) 8))) ; vector + elements
                      ((numberp object) 16)      ; numbers
                      (t 32)))                   ; default guess
         (total-size (+ base-size extra-bytes)))
    (format t "Object: ~S~%" object)
    (format t "Base address: 0x~x~%" base-addr)
    (when (/= offset 0)
      (format t "Offset: ~d bytes~%" offset)
      (format t "Actual address: 0x~x~%" addr))
    (format t "Estimated size: ~d bytes (+ ~d extra)~%~%" base-size extra-bytes)
    (hexdump addr total-size)))

(defun memory-peek (object &optional (count 8))
  "Quick peek at memory - shows COUNT bytes as both hex and decimal."
  (let ((address (sb-kernel:get-lisp-obj-address object)))
    (format t "Memory at 0x~8,'0x:~%" address)
    (loop for i from 0 below count
          for byte = (sb-sys:sap-ref-8 (sb-sys:int-sap (+ address i)) 0)
          do (format t "  +~d: 0x~2,'0x (~3d) ~c~%"
                     i byte byte
                     (if (and (>= byte 32) (<= byte 126))
                         (code-char byte)
                         #\.)))))

