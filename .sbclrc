;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(defun update-ql ()
  (ql:update-client)
  (ql:update-all-dists))

(defun update-sbcl-core ()
  ; make sure to update-ql and restart sbcl first
  ; add any quickloads here that we might want as part of core not captured by .sbclrc
  ; numcl, vgplot
  (uiop:dump-image "sbcl-core"))


(defparameter *undefined-functions* nil)
(defun enable-undefn-warnings ()
  ; useful idea I had, rebind defun to keep track
  ; of functions that have been referenced but not yet
  ; defined. Loosely inspired by Utopian.
  (setf (macro-function 'cl-defun) (macro-function 'defun))
  (handler-bind
    ((warning
       (lambda (w)
         (declare (ignorable w))
         (invoke-restart 'muffle-warning)))
     (sb-ext:symbol-package-locked-error
       (lambda (e)
         (declare (ignorable e))
         (invoke-restart 'continue))))
    (defmacro defun (name args &body body)
      `(handler-bind
         ((sb-int:simple-style-warning
            (lambda (w)
              (let ((c (simple-condition-format-control w))
                    (a (simple-condition-format-arguments w)))
                (when (and (equal c "undefined ~(~A~): ~S")
                           (eql (length a) 2)
                           (eql (first a) :function))
                  (setf *undefined-functions*
                        (union *undefined-functions* (cdr a))))))))
         (eval '(cl-defun ,name ,args ,@body))
         (setf *undefined-functions*
               (set-difference *undefined-functions* '(,name)))
         (if (plusp (length *undefined-functions*))
             (format t
                     "; REMINDER: you still have undefined functions ~S"
                     *undefined-functions*)))))
  (defun typo (fn)
    "Remove undef fn reminder manually, e.g. due to typos."
    (setf *undefined-functions*
          (set-difference *undefined-functions* (list fn))))
  )


(defun hash-to-list (hash)
  "Turns key-value hash table to list of ((k1 v1) (k2 v2) ...)"
  (loop
    :for k being the hash-key :using (hash-value v) of hash
    :nconc (list (list k v))))

(defun hash-to-plist (hash)
  "Turns key-value hash table to pair list of (k1 v1 k2 v2 ...)"
  (loop
    :for k being the hash-key :using (hash-value v) of hash
    :nconc (list k v)))

(locally
  (declare #+sbcl (sb-ext:muffle-conditions sb-kernel:redefinition-warning))
  (handler-bind
    (#+sbcl (sb-kernel:redefinition-warning #'muffle-warning))
(defmethod print-object ((hash hash-table) out)
  "Print hash table like a data object, e.g.
{:A 1
 :B 2}"
  (format t "{~{~s ~s~^~% ~}}" (hash-to-plist hash))
  #|(loop
    :initially (format out "{")
    :for k being the hash-key :using (hash-value v) of hash
    :do (format out "~% ~s ~s" k v)
    :finally (format out "~%}~%"))|#)
))

;(declaim (optimize (debug 3)))
;(declaim (optimize (speed 3) (space 3) (debug 0) (safety 0)))
; (declaim (optimize (speed 3)))
;(progn
;  (sb-ext:restrict-compiler-policy 'safety 3)
;  (sb-ext:restrict-compiler-policy 'debug 3))

#+quicklisp (ql:quickload 'cmu-infix)
#+quicklisp (named-readtables:in-readtable cmu-infix:syntax)

;(format t "Your cwd is ~s.~%" (sb-posix:getcwd))

; (sb-ext:describe-compiler-policy)
; sb-c::*policy*
; (sb-cltl2:declaration-information 'optimize)


(set-dispatch-macro-character #\# #\! (lambda (stream subchar arg)
                                        (declare (ignore subchar arg))
                                        (read-line stream nil (values) t)
                                        (values)))

#+quicklisp (ql:quickload :clouseau)
(defvar *clouseau-inspector* nil)
(defun clouseau-inspect (symbol)
  (unless (and (clim:application-frame-p *clouseau-inspector*)
               (clim-internals::frame-process *clouseau-inspector*))
    (setf *clouseau-inspector*
          (nth-value 1 (clouseau:inspect nil :new-process t))))

  (setf (clouseau:root-object *clouseau-inspector* :run-hook-p t)
        symbol)
  (values))

#+quicklisp (ql:quickload :bordeaux-threads)
(defvar *watching* nil)

(defun clouseau-unwatch ()
  (bt:destroy-thread *watching*)
  (setf *watching* nil))

(defun clouseau-watch (symbol &optional (refresh 1))
  (unless (and (clim:application-frame-p *clouseau-inspector*)
               (clim-internals::frame-process *clouseau-inspector*))
    (setf *clouseau-inspector*
          (nth-value 1 (clouseau:inspect nil :new-process t))))

  (when *watching*
    (clouseau-unwatch))

  (setf *watching*
        (bt:make-thread (lambda ()
                          (loop
                            (setf (clouseau:root-object *clouseau-inspector* :run-hook-p t)
                                  symbol)
                            (sleep refresh))))))

;(setf *print-case* :downcase) ; let's try it out...
; messes up some libraries..

(defun search-in-docstring (text &key (test (function search)))
  (let ((funs '()))
    (do-symbols (fun)
      (when (fboundp fun)
        (let ((docstring (documentation fun 'function)))
          (when (and docstring
                     (funcall test text docstring))
            (push fun funs)))))
    funs))
